//
// yast.h
//
// This file is intended to be eventually generated by a codegen tool
//
#ifndef __WSMAN_YAST_H__
#define __WSMAN_YAST_H__

#ifdef __cplusplus
extern "C" {
#endif                          /* __cplusplus */

//#include <wsman-soap.h>
#include <wsman-xml-serializer.h>

#include <wsman-declarations.h>

// The resource is modeled as an xml string
// see below: SER_DECLARE_TYPE
struct __wsm_yast
{
    char *xml;
};
typedef struct __wsm_yast YaST;

// Service endpoint declaration
int YaST_Identify_EP( WsContextH cntx );

int YaST_Enumerate_EP( WsContextH cntx, WsEnumerateInfo* enumInfo,
		WsmanStatus *status,
		void *opaqueData );

int YaST_Release_EP( WsContextH cntx, WsEnumerateInfo* enumInfo,
		WsmanStatus *status,
		void *opaqueData );

int YaST_Pull_EP( WsContextH cntx, WsEnumerateInfo* enumInfo,
		WsmanStatus *status,
		void *opaqueData );

int YaST_Get_EP( SoapOpH op, void* appData, void *opaqueData );

int YaST_Custom_EP( SoapOpH op, void* appData, void *opaqueData );

int YaST_Put_EP( SoapOpH op, void* appData, void *opaqueData );

int YaST_Create_EP( SoapOpH op, void* appData, void *opaqueData );

int YaST_Delete_EP( SoapOpH op, void* appData, void *opaqueData );



// Two macro below will declare 
// Serialization type info declaration for the resource
// extern struct __XmlSerializerInfo YaST_TypeInfo[];
// End point array declaration for the resource
// extern WsDispatchEndPointInfo YaST_EndPoints[];
SER_DECLARE_TYPE(YaST);
DECLARE_EP_ARRAY(YaST);

void get_endpoints(void *self, void **data);
int init (void *self, void **data );
void cleanup( void *self, void *data );
void set_config( void *self, dictionary *config );

#define XML_NS_WSMAN_YAST "http://schema.opensuse.org/YaST/wsman-schema/10-3"


// yast_yast.cc
extern int evaluate_ycp( const char *ycp, WsXmlNodeH out_body );
extern void yast_initialize( void );
extern void yast_finish( void );

#ifdef __cplusplus
} // extern "C"
#endif                          /* __cplusplus */


#endif  // __WSMAN_YAST_H__
